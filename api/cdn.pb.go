// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: cdn.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ResolveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResolveRequest) Reset() {
	*x = ResolveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveRequest) ProtoMessage() {}

func (x *ResolveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveRequest.ProtoReflect.Descriptor instead.
func (*ResolveRequest) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{0}
}

type ResolveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cname string `protobuf:"bytes,1,opt,name=cname,proto3" json:"cname,omitempty"` // the canonical hostname, used for identifying the server behind an anycast IP.
}

func (x *ResolveResponse) Reset() {
	*x = ResolveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResolveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResolveResponse) ProtoMessage() {}

func (x *ResolveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResolveResponse.ProtoReflect.Descriptor instead.
func (*ResolveResponse) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{1}
}

func (x *ResolveResponse) GetCname() string {
	if x != nil {
		return x.Cname
	}
	return ""
}

type TraverseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
}

func (x *TraverseRequest) Reset() {
	*x = TraverseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseRequest) ProtoMessage() {}

func (x *TraverseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseRequest.ProtoReflect.Descriptor instead.
func (*TraverseRequest) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{2}
}

func (x *TraverseRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type TraverseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscribers             []*TraverseResponse_Subscriber `protobuf:"bytes,1,rep,name=subscribers,proto3" json:"subscribers,omitempty"`
	RequestedMaxSubscribers int64                          `protobuf:"varint,2,opt,name=requested_max_subscribers,json=requestedMaxSubscribers,proto3" json:"requested_max_subscribers,omitempty"` // the requested max number of subscribers.
}

func (x *TraverseResponse) Reset() {
	*x = TraverseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseResponse) ProtoMessage() {}

func (x *TraverseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseResponse.ProtoReflect.Descriptor instead.
func (*TraverseResponse) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{3}
}

func (x *TraverseResponse) GetSubscribers() []*TraverseResponse_Subscriber {
	if x != nil {
		return x.Subscribers
	}
	return nil
}

func (x *TraverseResponse) GetRequestedMaxSubscribers() int64 {
	if x != nil {
		return x.RequestedMaxSubscribers
	}
	return 0
}

type Signal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*Signal_OfferSdp
	//	*Signal_AnswerSdp
	//	*Signal_Trickle
	Payload isSignal_Payload `protobuf_oneof:"payload"`
}

func (x *Signal) Reset() {
	*x = Signal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signal) ProtoMessage() {}

func (x *Signal) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signal.ProtoReflect.Descriptor instead.
func (*Signal) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{4}
}

func (m *Signal) GetPayload() isSignal_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Signal) GetOfferSdp() string {
	if x, ok := x.GetPayload().(*Signal_OfferSdp); ok {
		return x.OfferSdp
	}
	return ""
}

func (x *Signal) GetAnswerSdp() string {
	if x, ok := x.GetPayload().(*Signal_AnswerSdp); ok {
		return x.AnswerSdp
	}
	return ""
}

func (x *Signal) GetTrickle() string {
	if x, ok := x.GetPayload().(*Signal_Trickle); ok {
		return x.Trickle
	}
	return ""
}

type isSignal_Payload interface {
	isSignal_Payload()
}

type Signal_OfferSdp struct {
	OfferSdp string `protobuf:"bytes,1,opt,name=offer_sdp,json=offerSdp,proto3,oneof"`
}

type Signal_AnswerSdp struct {
	AnswerSdp string `protobuf:"bytes,2,opt,name=answer_sdp,json=answerSdp,proto3,oneof"`
}

type Signal_Trickle struct {
	Trickle string `protobuf:"bytes,3,opt,name=trickle,proto3,oneof"`
}

func (*Signal_OfferSdp) isSignal_Payload() {}

func (*Signal_AnswerSdp) isSignal_Payload() {}

func (*Signal_Trickle) isSignal_Payload() {}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	StreamId    string `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	RtpStreamId string `protobuf:"bytes,3,opt,name=rtp_stream_id,json=rtpStreamId,proto3" json:"rtp_stream_id,omitempty"`
	Key         string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// for debugging, this is the path through the DHT taken to send this track.
	Trace []string `protobuf:"bytes,5,rep,name=trace,proto3" json:"trace,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{5}
}

func (x *Track) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Track) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *Track) GetRtpStreamId() string {
	if x != nil {
		return x.RtpStreamId
	}
	return ""
}

func (x *Track) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Track) GetTrace() []string {
	if x != nil {
		return x.Trace
	}
	return nil
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//	*SubscribeRequest_Subscription_
	//	*SubscribeRequest_Signal
	Operation isSubscribeRequest_Operation `protobuf_oneof:"operation"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{6}
}

func (m *SubscribeRequest) GetOperation() isSubscribeRequest_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *SubscribeRequest) GetSubscription() *SubscribeRequest_Subscription {
	if x, ok := x.GetOperation().(*SubscribeRequest_Subscription_); ok {
		return x.Subscription
	}
	return nil
}

func (x *SubscribeRequest) GetSignal() *Signal {
	if x, ok := x.GetOperation().(*SubscribeRequest_Signal); ok {
		return x.Signal
	}
	return nil
}

type isSubscribeRequest_Operation interface {
	isSubscribeRequest_Operation()
}

type SubscribeRequest_Subscription_ struct {
	Subscription *SubscribeRequest_Subscription `protobuf:"bytes,1,opt,name=subscription,proto3,oneof"`
}

type SubscribeRequest_Signal struct {
	Signal *Signal `protobuf:"bytes,2,opt,name=signal,proto3,oneof"` // WebRTC signalling.
}

func (*SubscribeRequest_Subscription_) isSubscribeRequest_Operation() {}

func (*SubscribeRequest_Signal) isSubscribeRequest_Operation() {}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//	*SubscribeResponse_Track
	//	*SubscribeResponse_Signal
	Operation isSubscribeResponse_Operation `protobuf_oneof:"operation"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{7}
}

func (m *SubscribeResponse) GetOperation() isSubscribeResponse_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *SubscribeResponse) GetTrack() *Track {
	if x, ok := x.GetOperation().(*SubscribeResponse_Track); ok {
		return x.Track
	}
	return nil
}

func (x *SubscribeResponse) GetSignal() *Signal {
	if x, ok := x.GetOperation().(*SubscribeResponse_Signal); ok {
		return x.Signal
	}
	return nil
}

type isSubscribeResponse_Operation interface {
	isSubscribeResponse_Operation()
}

type SubscribeResponse_Track struct {
	Track *Track `protobuf:"bytes,1,opt,name=track,proto3,oneof"`
}

type SubscribeResponse_Signal struct {
	Signal *Signal `protobuf:"bytes,2,opt,name=signal,proto3,oneof"`
}

func (*SubscribeResponse_Track) isSubscribeResponse_Operation() {}

func (*SubscribeResponse_Signal) isSubscribeResponse_Operation() {}

type PublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signal *Signal `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{8}
}

func (x *PublishRequest) GetSignal() *Signal {
	if x != nil {
		return x.Signal
	}
	return nil
}

type PublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Operation:
	//	*PublishResponse_Track
	//	*PublishResponse_Signal
	Operation isPublishResponse_Operation `protobuf_oneof:"operation"`
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{9}
}

func (m *PublishResponse) GetOperation() isPublishResponse_Operation {
	if m != nil {
		return m.Operation
	}
	return nil
}

func (x *PublishResponse) GetTrack() *Track {
	if x, ok := x.GetOperation().(*PublishResponse_Track); ok {
		return x.Track
	}
	return nil
}

func (x *PublishResponse) GetSignal() *Signal {
	if x, ok := x.GetOperation().(*PublishResponse_Signal); ok {
		return x.Signal
	}
	return nil
}

type isPublishResponse_Operation interface {
	isPublishResponse_Operation()
}

type PublishResponse_Track struct {
	Track *Track `protobuf:"bytes,1,opt,name=track,proto3,oneof"`
}

type PublishResponse_Signal struct {
	Signal *Signal `protobuf:"bytes,2,opt,name=signal,proto3,oneof"`
}

func (*PublishResponse_Track) isPublishResponse_Operation() {}

func (*PublishResponse_Signal) isPublishResponse_Operation() {}

type TraverseResponse_Subscriber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cname   string               `protobuf:"bytes,1,opt,name=cname,proto3" json:"cname,omitempty"`
	Latency *durationpb.Duration `protobuf:"bytes,2,opt,name=latency,proto3" json:"latency,omitempty"`
}

func (x *TraverseResponse_Subscriber) Reset() {
	*x = TraverseResponse_Subscriber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseResponse_Subscriber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseResponse_Subscriber) ProtoMessage() {}

func (x *TraverseResponse_Subscriber) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseResponse_Subscriber.ProtoReflect.Descriptor instead.
func (*TraverseResponse_Subscriber) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{3, 0}
}

func (x *TraverseResponse_Subscriber) GetCname() string {
	if x != nil {
		return x.Cname
	}
	return ""
}

func (x *TraverseResponse_Subscriber) GetLatency() *durationpb.Duration {
	if x != nil {
		return x.Latency
	}
	return nil
}

type SubscribeRequest_Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key             string               `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`                                                // subscribe to a published stream id.
	Cname           string               `protobuf:"bytes,2,opt,name=cname,proto3" json:"cname,omitempty"`                                            // the canonical hostname of the subscriber that the server will forward on for verifications.
	ReportedLatency *durationpb.Duration `protobuf:"bytes,3,opt,name=reported_latency,json=reportedLatency,proto3" json:"reported_latency,omitempty"` // the estimated half RTT latency of the subscriber.
}

func (x *SubscribeRequest_Subscription) Reset() {
	*x = SubscribeRequest_Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdn_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest_Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest_Subscription) ProtoMessage() {}

func (x *SubscribeRequest_Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_cdn_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest_Subscription.ProtoReflect.Descriptor instead.
func (*SubscribeRequest_Subscription) Descriptor() ([]byte, []int) {
	return file_cdn_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SubscribeRequest_Subscription) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SubscribeRequest_Subscription) GetCname() string {
	if x != nil {
		return x.Cname
	}
	return ""
}

func (x *SubscribeRequest_Subscription) GetReportedLatency() *durationpb.Duration {
	if x != nil {
		return x.ReportedLatency
	}
	return nil
}

var File_cdn_proto protoreflect.FileDescriptor

var file_cdn_proto_rawDesc = []byte{
	0x0a, 0x09, 0x63, 0x64, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a,
	0x0e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x27, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2e, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0xeb, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x73, 0x12, 0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d,
	0x61, 0x78, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x57, 0x0a,
	0x0a, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x6f, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x53, 0x64, 0x70, 0x12,
	0x1f, 0x0a, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x53, 0x64, 0x70,
	0x12, 0x1a, 0x0a, 0x07, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x72, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x74, 0x70, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x1a, 0x7c, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0b,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a, 0x11, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x05, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a, 0x0e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x06, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22,
	0x69, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x05, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x42, 0x0b, 0x0a,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0xf9, 0x01, 0x0a, 0x03, 0x43,
	0x44, 0x4e, 0x12, 0x39, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x1c, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x75, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x63, 0x64, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cdn_proto_rawDescOnce sync.Once
	file_cdn_proto_rawDescData = file_cdn_proto_rawDesc
)

func file_cdn_proto_rawDescGZIP() []byte {
	file_cdn_proto_rawDescOnce.Do(func() {
		file_cdn_proto_rawDescData = protoimpl.X.CompressGZIP(file_cdn_proto_rawDescData)
	})
	return file_cdn_proto_rawDescData
}

var file_cdn_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_cdn_proto_goTypes = []interface{}{
	(*ResolveRequest)(nil),                // 0: api.ResolveRequest
	(*ResolveResponse)(nil),               // 1: api.ResolveResponse
	(*TraverseRequest)(nil),               // 2: api.TraverseRequest
	(*TraverseResponse)(nil),              // 3: api.TraverseResponse
	(*Signal)(nil),                        // 4: api.Signal
	(*Track)(nil),                         // 5: api.Track
	(*SubscribeRequest)(nil),              // 6: api.SubscribeRequest
	(*SubscribeResponse)(nil),             // 7: api.SubscribeResponse
	(*PublishRequest)(nil),                // 8: api.PublishRequest
	(*PublishResponse)(nil),               // 9: api.PublishResponse
	(*TraverseResponse_Subscriber)(nil),   // 10: api.TraverseResponse.Subscriber
	(*SubscribeRequest_Subscription)(nil), // 11: api.SubscribeRequest.Subscription
	(*durationpb.Duration)(nil),           // 12: google.protobuf.Duration
	(*emptypb.Empty)(nil),                 // 13: google.protobuf.Empty
}
var file_cdn_proto_depIdxs = []int32{
	10, // 0: api.TraverseResponse.subscribers:type_name -> api.TraverseResponse.Subscriber
	11, // 1: api.SubscribeRequest.subscription:type_name -> api.SubscribeRequest.Subscription
	4,  // 2: api.SubscribeRequest.signal:type_name -> api.Signal
	5,  // 3: api.SubscribeResponse.track:type_name -> api.Track
	4,  // 4: api.SubscribeResponse.signal:type_name -> api.Signal
	4,  // 5: api.PublishRequest.signal:type_name -> api.Signal
	5,  // 6: api.PublishResponse.track:type_name -> api.Track
	4,  // 7: api.PublishResponse.signal:type_name -> api.Signal
	12, // 8: api.TraverseResponse.Subscriber.latency:type_name -> google.protobuf.Duration
	12, // 9: api.SubscribeRequest.Subscription.reported_latency:type_name -> google.protobuf.Duration
	13, // 10: api.CDN.Resolve:input_type -> google.protobuf.Empty
	2,  // 11: api.CDN.Traverse:input_type -> api.TraverseRequest
	8,  // 12: api.CDN.Publish:input_type -> api.PublishRequest
	6,  // 13: api.CDN.Subscribe:input_type -> api.SubscribeRequest
	1,  // 14: api.CDN.Resolve:output_type -> api.ResolveResponse
	3,  // 15: api.CDN.Traverse:output_type -> api.TraverseResponse
	9,  // 16: api.CDN.Publish:output_type -> api.PublishResponse
	7,  // 17: api.CDN.Subscribe:output_type -> api.SubscribeResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_cdn_proto_init() }
func file_cdn_proto_init() {
	if File_cdn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cdn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResolveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseResponse_Subscriber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdn_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest_Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cdn_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Signal_OfferSdp)(nil),
		(*Signal_AnswerSdp)(nil),
		(*Signal_Trickle)(nil),
	}
	file_cdn_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*SubscribeRequest_Subscription_)(nil),
		(*SubscribeRequest_Signal)(nil),
	}
	file_cdn_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*SubscribeResponse_Track)(nil),
		(*SubscribeResponse_Signal)(nil),
	}
	file_cdn_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PublishResponse_Track)(nil),
		(*PublishResponse_Signal)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cdn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cdn_proto_goTypes,
		DependencyIndexes: file_cdn_proto_depIdxs,
		MessageInfos:      file_cdn_proto_msgTypes,
	}.Build()
	File_cdn_proto = out.File
	file_cdn_proto_rawDesc = nil
	file_cdn_proto_goTypes = nil
	file_cdn_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CDNClient is the client API for CDN service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDNClient interface {
	Resolve(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResolveResponse, error)
	Traverse(ctx context.Context, in *TraverseRequest, opts ...grpc.CallOption) (*TraverseResponse, error)
	Publish(ctx context.Context, opts ...grpc.CallOption) (CDN_PublishClient, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (CDN_SubscribeClient, error)
}

type cDNClient struct {
	cc grpc.ClientConnInterface
}

func NewCDNClient(cc grpc.ClientConnInterface) CDNClient {
	return &cDNClient{cc}
}

func (c *cDNClient) Resolve(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := c.cc.Invoke(ctx, "/api.CDN/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNClient) Traverse(ctx context.Context, in *TraverseRequest, opts ...grpc.CallOption) (*TraverseResponse, error) {
	out := new(TraverseResponse)
	err := c.cc.Invoke(ctx, "/api.CDN/Traverse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDNClient) Publish(ctx context.Context, opts ...grpc.CallOption) (CDN_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDN_serviceDesc.Streams[0], "/api.CDN/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDNPublishClient{stream}
	return x, nil
}

type CDN_PublishClient interface {
	Send(*PublishRequest) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type cDNPublishClient struct {
	grpc.ClientStream
}

func (x *cDNPublishClient) Send(m *PublishRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cDNPublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cDNClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (CDN_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CDN_serviceDesc.Streams[1], "/api.CDN/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &cDNSubscribeClient{stream}
	return x, nil
}

type CDN_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type cDNSubscribeClient struct {
	grpc.ClientStream
}

func (x *cDNSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cDNSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CDNServer is the server API for CDN service.
type CDNServer interface {
	Resolve(context.Context, *emptypb.Empty) (*ResolveResponse, error)
	Traverse(context.Context, *TraverseRequest) (*TraverseResponse, error)
	Publish(CDN_PublishServer) error
	Subscribe(CDN_SubscribeServer) error
}

// UnimplementedCDNServer can be embedded to have forward compatible implementations.
type UnimplementedCDNServer struct {
}

func (*UnimplementedCDNServer) Resolve(context.Context, *emptypb.Empty) (*ResolveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (*UnimplementedCDNServer) Traverse(context.Context, *TraverseRequest) (*TraverseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Traverse not implemented")
}
func (*UnimplementedCDNServer) Publish(CDN_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedCDNServer) Subscribe(CDN_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterCDNServer(s *grpc.Server, srv CDNServer) {
	s.RegisterService(&_CDN_serviceDesc, srv)
}

func _CDN_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDN/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServer).Resolve(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDN_Traverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TraverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDNServer).Traverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CDN/Traverse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDNServer).Traverse(ctx, req.(*TraverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDN_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CDNServer).Publish(&cDNPublishServer{stream})
}

type CDN_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*PublishRequest, error)
	grpc.ServerStream
}

type cDNPublishServer struct {
	grpc.ServerStream
}

func (x *cDNPublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cDNPublishServer) Recv() (*PublishRequest, error) {
	m := new(PublishRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CDN_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CDNServer).Subscribe(&cDNSubscribeServer{stream})
}

type CDN_SubscribeServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type cDNSubscribeServer struct {
	grpc.ServerStream
}

func (x *cDNSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cDNSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _CDN_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CDN",
	HandlerType: (*CDNServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _CDN_Resolve_Handler,
		},
		{
			MethodName: "Traverse",
			Handler:    _CDN_Traverse_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _CDN_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _CDN_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cdn.proto",
}
